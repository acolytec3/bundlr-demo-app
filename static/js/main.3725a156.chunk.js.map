{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","App","web3","useWeb3React","library","maticBalance","setBalance","React","useState","img","setImg","price","setPrice","bundler","setBundler","bundlerHttpAddress","setBundlerAddress","fundAmount","setFundingAmount","toast","useToast","connectWeb3","async","active","deactivate","undefined","activate","connector","err","console","log","handleUpload","files","evt","target","reader","FileReader","length","onload","result","Buffer","from","readAsArrayBuffer","mt","onClick","account","w","disabled","chainId","send","bundlr","BundlrBrowserClient","getPrice","connect","signer","publicKey","value","onChange","placeholder","getBundlrBalance","then","res","ethers","utils","formatEther","fundMatic","BigNumber","mul","pow","fileInputEl","document","createElement","type","accept","style","display","body","appendChild","addEventListener","e","removeChild","click","uploadItem","name","status","description","data","duration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider","providers","Web3Provider","theme","getElementById"],"mappings":"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","file":"static/js/main.3725a156.chunk.js","sourcesContent":["import React from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { BundlrBrowserClient } from \"bundlr-browser-client\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Input, HStack, Text, VStack, useToast } from \"@chakra-ui/react\";\n\nconst injected = new InjectedConnector({\n  supportedChainIds: [1, 137],\n});\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: {\n    137: \"https://polygon-rpc.com\",\n  },\n});\n\nfunction App() {\n  const web3 = useWeb3React();\n  const library = web3.library as ethers.providers.Web3Provider;\n  const [maticBalance, setBalance] = React.useState<BigNumber>();\n  const [img, setImg] = React.useState<Buffer>();\n  const [price, setPrice] = React.useState<BigNumber>();\n  const [bundler, setBundler] = React.useState<BundlrBrowserClient>();\n  const [bundlerHttpAddress, setBundlerAddress] = React.useState<string>();\n  const [fundAmount, setFundingAmount] = React.useState<string>();\n  const toast = useToast();\n  const connectWeb3 = async (\n    connector: InjectedConnector | WalletConnectConnector\n  ) => {\n    if (web3.active) {\n      web3.deactivate();\n      setBalance(undefined);\n      setImg(undefined);\n      setPrice(undefined);\n      setBundler(undefined);\n      return;\n    }\n    try {\n      await web3.activate(connector);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectBundlr = async () => {\n    if (web3.chainId !== 137) {\n      // If not connected to polygon, request network switch\n      await library.send(\"wallet_switchEthereumChain\", [{ chainId: \"0x89\" }]);\n    }\n    if (!bundlerHttpAddress) return;\n    const bundlr = new BundlrBrowserClient(bundlerHttpAddress, web3.library);\n    try {\n      // Check for valid bundlr node\n      await bundlr.getPrice(1);\n    } catch {\n      console.log(\"invalid bundlr node\");\n      return;\n    }\n    try {\n      await bundlr.connect();\n    } catch (err) {\n      console.log(err);\n    } //@ts-ignore\n    if (!bundlr.signer.publicKey) {\n      console.log(\"something went wrong\");\n    }\n    setBundler(bundlr);\n  };\n  const handleFileClick = () => {\n    var fileInputEl = document.createElement(\"input\");\n    fileInputEl.type = \"file\";\n    fileInputEl.accept = \"image/*\";\n    fileInputEl.style.display = \"none\";\n    document.body.appendChild(fileInputEl);\n    fileInputEl.addEventListener(\"input\", function (e) {\n      handleUpload(e as any);\n      document.body.removeChild(fileInputEl);\n    });\n    fileInputEl.click();\n  };\n\n  const handleUpload = async (evt: React.ChangeEvent<HTMLInputElement>) => {\n    let files = evt.target.files;\n    let reader = new FileReader();\n    if (files && files.length > 0) {\n      reader.onload = function () {\n        if (reader.result) {\n          setImg(Buffer.from(reader.result as ArrayBuffer));\n        }\n      };\n      reader.readAsArrayBuffer(files[0]);\n    }\n  };\n\n  const handlePrice = async () => {\n    if (img) {\n      const price = await bundler!.getPrice(img.length);\n      setPrice(price);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (img) {\n      const res = await bundler!.uploadItem(img, [\n        { name: \"Content-Type\", value: \"image/png\" },\n      ]);\n      console.log(res);\n      toast({\n        status: res.status === 200 ? \"success\" : \"error\",\n        description: res.data,\n        duration: 5000,\n      });\n    }\n  };\n\n  const fundMatic = async () => {\n    if (bundler) {\n      const res = bundler.fundMatic(\n        BigNumber.from(fundAmount)\n          .mul(BigNumber.from(10))\n          .pow(BigNumber.from(18))\n      );\n      console.log(res);\n    }\n  };\n\n  const updateAddress = (evt: React.BaseSyntheticEvent) => {\n    setBundlerAddress(evt.target.value);\n  };\n\n  const updateFundAmount = (evt: React.BaseSyntheticEvent) => {\n    setFundingAmount(evt.target.value);\n  };\n\n  return (\n    <VStack mt={10}>\n      <HStack>\n        {\" \"}\n        <Button onClick={() => connectWeb3(injected)}>\n          {web3.connector instanceof InjectedConnector && web3.active\n            ? \"Disconnect\"\n            : \"Connect\"}{\" \"}\n          Metamask\n        </Button>\n        <Button onClick={() => connectWeb3(walletconnect)}>\n          {web3.connector instanceof WalletConnectConnector && web3.active\n            ? \"Disconnect\"\n            : \"Connect\"}{\" \"}\n          WalletConnect\n        </Button>\n      </HStack>\n      <Text>Connected Account: {web3.account ?? \"None\"}</Text>\n      <HStack>\n        <Button w={400} disabled={!web3.active} onClick={connectBundlr}>\n          Connect to Bundlr Network\n        </Button>\n        <Input\n          value={bundlerHttpAddress}\n          onChange={updateAddress}\n          placeholder=\"Bundler Address\"\n        />\n      </HStack>\n      {bundler && (\n        <>\n          <HStack>\n            <Button\n              onClick={() => {\n                web3.account &&\n                  bundler!\n                    .getBundlrBalance(web3.account)\n                    .then((res: BigNumber) => setBalance(res));\n              }}\n            >\n              Get Matic Balance\n            </Button>\n            {maticBalance && (\n              <Text>\n                Matic Balance: {ethers.utils.formatEther(maticBalance)}\n              </Text>\n            )}\n          </HStack>\n          <HStack>\n            <Button onClick={fundMatic}>Fund Bundlr</Button>\n            <Input\n              placeholder=\"MATIC Amount\"\n              value={fundAmount}\n              onChange={updateFundAmount}\n            />\n          </HStack>\n        </>\n      )}\n      <Button onClick={handleFileClick}>Select file from Device</Button>\n      {img && (\n        <>\n          <HStack>\n            <Button onClick={handlePrice}>Get Price</Button>\n            {price && (\n              <Text>MATIC Cost: {ethers.utils.formatEther(price)}</Text>\n            )}\n          </HStack>\n          <Button onClick={uploadFile}>Upload to Bundlr Network</Button>\n        </>\n      )}\n    </VStack>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { ethers } from \"ethers\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nfunction getLibrary(provider: any, connector: any) {\n  return new ethers.providers.Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}